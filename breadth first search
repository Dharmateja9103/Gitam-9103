{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO1JlDDnCBGDAYYPIUZbfSC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dharmateja9103/skills-introduction-to-github/blob/main/breadth%20first%20search\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "o0fqZn9iD1Mg",
        "outputId": "c77af665-ffbe-4ec0-df21-54c0ab5c20d8"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-a33bb3bbac4c>\u001b[0m in \u001b[0;36m<cell line: 69>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m \u001b[0mbreadth_first_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-2-a33bb3bbac4c>\u001b[0m in \u001b[0;36mbreadth_first_search\u001b[0;34m()\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mbreadth_first_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m     \u001b[0mqueue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdeque\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m     \u001b[0mvisited\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minitial_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'deque' is not defined"
          ]
        }
      ],
      "source": [
        "initial_state = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]\n",
        "goal_state = [[1, 2, 3], [5, 8, 6], [0, 7, 4]]\n",
        "\n",
        "\n",
        "def is_goal_state(state):\n",
        "    return state == goal_state\n",
        "\n",
        "\n",
        "def find_blank_tile(state):\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if state[i][j] == 0:\n",
        "                return (i, j)\n",
        "\n",
        "\n",
        "def generate_states(state):\n",
        "    blank_tile = find_blank_tile(state)\n",
        "    i, j = blank_tile[0], blank_tile[1]\n",
        "    states = []\n",
        "\n",
        "    if i > 0:\n",
        "        new_state = [row[:] for row in state]\n",
        "        new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]\n",
        "        states.append(new_state)\n",
        "        for row in new_state:\n",
        "            print(row)\n",
        "            print(\"\\n\")\n",
        "\n",
        "    if j > 0:\n",
        "        new_state = [row[:] for row in state]\n",
        "        new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]\n",
        "        states.append(new_state)\n",
        "        for row in new_state:\n",
        "            print(row)\n",
        "            print(\"\\n\")\n",
        "\n",
        "    if i < 2:\n",
        "        new_state = [row[:] for row in state]\n",
        "        new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]\n",
        "        states.append(new_state)\n",
        "        for row in new_state:\n",
        "            print(row)\n",
        "            print(\"\\n\")\n",
        "\n",
        "    return states\n",
        "\n",
        "\n",
        "def breadth_first_search():\n",
        "    queue = deque()\n",
        "    visited = set()\n",
        "    queue.append(initial_state)\n",
        "    visited.add(tuple(tuple(x) for x in initial_state))\n",
        "\n",
        "    while queue:\n",
        "        current_state = queue.popleft()\n",
        "\n",
        "        if is_goal_state(current_state):\n",
        "            print(\"Found goal state:\")\n",
        "            for row in current_state:\n",
        "                print(row)\n",
        "            return\n",
        "\n",
        "        for state in generate_states(current_state):\n",
        "            if tuple(tuple(x) for x in state) not in visited:\n",
        "                queue.append(state)\n",
        "                visited.add(tuple(tuple(x) for x in state))\n",
        "\n",
        "\n",
        "breadth_first_search()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import deque\n",
        "\n",
        "initial_state = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]\n",
        "goal_state = [[1, 2, 3], [5, 8, 6], [0, 7, 4]]\n",
        "\n",
        "\n",
        "def is_goal_state(state):\n",
        "    return state == goal_state\n",
        "\n",
        "\n",
        "def find_blank_tile(state):\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if state[i][j] == 0:\n",
        "                return (i, j)\n",
        "\n",
        "\n",
        "def generate_states(state):\n",
        "    blank_tile = find_blank_tile(state)\n",
        "    i, j = blank_tile[0], blank_tile[1]\n",
        "    states = []\n",
        "\n",
        "    if i > 0:\n",
        "        new_state = [row[:] for row in state]\n",
        "        new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]\n",
        "        states.append(new_state)\n",
        "        for row in new_state:\n",
        "            print(row)\n",
        "            print(\"\\n\")\n",
        "\n",
        "    if j > 0:\n",
        "        new_state = [row[:] for row in state]\n",
        "        new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]\n",
        "        states.append(new_state)\n",
        "        for row in new_state:\n",
        "            print(row)\n",
        "            print(\"\\n\")\n",
        "\n",
        "    if i < 2:\n",
        "        new_state = [row[:] for row in state]\n",
        "        new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]\n",
        "        states.append(new_state)\n",
        "        for row in new_state:\n",
        "            print(row)\n",
        "            print(\"\\n\")\n",
        "\n",
        "    return states\n",
        "\n",
        "\n",
        "def breadth_first_search():\n",
        "    queue = deque()\n",
        "    visited = set()\n",
        "    queue.append(initial_state)\n",
        "    visited.add(tuple(tuple(x) for x in initial_state))\n",
        "\n",
        "    while queue:\n",
        "        current_state = queue.popleft()\n",
        "\n",
        "        if is_goal_state(current_state):\n",
        "            print(\"Found goal state:\")\n",
        "            for row in current_state:\n",
        "                print(row)\n",
        "            return\n",
        "\n",
        "        for state in generate_states(current_state):\n",
        "            if tuple(tuple(x) for x in state) not in visited:\n",
        "                queue.append(state)\n",
        "                visited.add(tuple(tuple(x) for x in state))\n",
        "\n",
        "\n",
        "breadth_first_search()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OVipNGQeEVWX",
        "outputId": "ee99f907-b19a-4196-e1a1-71e0142062be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 0]\n",
            "\n",
            "\n",
            "[5, 6, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 0, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 6, 4]\n",
            "\n",
            "\n",
            "[7, 8, 0]\n",
            "\n",
            "\n",
            "[1, 0, 2]\n",
            "\n",
            "\n",
            "[5, 6, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 6, 0]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 0, 3]\n",
            "\n",
            "\n",
            "[5, 2, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[0, 5, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 8, 6]\n",
            "\n",
            "\n",
            "[7, 0, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 6, 0]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 6, 4]\n",
            "\n",
            "\n",
            "[7, 0, 8]\n",
            "\n",
            "\n",
            "[0, 1, 2]\n",
            "\n",
            "\n",
            "[5, 6, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 6, 2]\n",
            "\n",
            "\n",
            "[5, 0, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[0, 1, 3]\n",
            "\n",
            "\n",
            "[5, 2, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 0, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[0, 2, 3]\n",
            "\n",
            "\n",
            "[1, 5, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[7, 5, 6]\n",
            "\n",
            "\n",
            "[0, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 0, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 8, 6]\n",
            "\n",
            "\n",
            "[0, 7, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 0, 4]\n",
            "\n",
            "\n",
            "[7, 6, 8]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[5, 6, 4]\n",
            "\n",
            "\n",
            "[0, 7, 8]\n",
            "\n",
            "\n",
            "[5, 1, 2]\n",
            "\n",
            "\n",
            "[0, 6, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 0, 2]\n",
            "\n",
            "\n",
            "[5, 6, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 6, 2]\n",
            "\n",
            "\n",
            "[0, 5, 3]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 6, 2]\n",
            "\n",
            "\n",
            "[5, 8, 3]\n",
            "\n",
            "\n",
            "[7, 0, 4]\n",
            "\n",
            "\n",
            "[5, 1, 3]\n",
            "\n",
            "\n",
            "[0, 2, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[0, 5, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "\n",
            "\n",
            "[0, 5, 6]\n",
            "\n",
            "\n",
            "[7, 8, 4]\n",
            "\n",
            "\n",
            "Found goal state:\n",
            "[1, 2, 3]\n",
            "[5, 8, 6]\n",
            "[0, 7, 4]\n"
          ]
        }
      ]
    }
  ]
}