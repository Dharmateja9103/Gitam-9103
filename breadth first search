from collections import deque

initial_state = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]
goal_state = [[1, 2, 3], [5, 8, 6], [0, 7, 4]]


def is_goal_state(state):
    return state == goal_state


def find_blank_tile(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return (i, j)


def generate_states(state):
    blank_tile = find_blank_tile(state)
    i, j = blank_tile[0], blank_tile[1]
    states = []

    if i > 0:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]
        states.append(new_state)
        for row in new_state:
            print(row)
            print("\n")

    if j > 0:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
        states.append(new_state)
        for row in new_state:
            print(row)
            print("\n")

    if i < 2:
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]
        states.append(new_state)
        for row in new_state:
            print(row)
            print("\n")

    return states


def breadth_first_search():
    queue = deque()
    visited = set()
    queue.append(initial_state)
    visited.add(tuple(tuple(x) for x in initial_state))

    while queue:
        current_state = queue.popleft()

        if is_goal_state(current_state):
            print("Found goal state:")
            for row in current_state:
                print(row)
            return

        for state in generate_states(current_state):
            if tuple(tuple(x) for x in state) not in visited:
                queue.append(state)
                visited.add(tuple(tuple(x) for x in state))


breadth_first_search()
